%D \module
%D   [       file=t-pauta,
%D        version=2024.03.02,
%D          title=\CONTEXT\ User Module,
%D       subtitle=Create templates for calligraphy practice using METAPOST,
%D         author=Andrés Conrado Montoya Acosta,
%D           date=\currentdate,
%D      copyright={Andrés Conrado Montoya Acosta},
%D        email=andresconrado@gmail.com,
%D      license=MIT License]
%D

%C Copyright (c) 2024 Andrés Conrado Montoya Acosta
%C
%C Permission is hereby granted, free of charge, to any person obtaining
%C a copy of this software and associated documentation files (the
%C "Software"), to deal in the Software without restriction, including
%C without limitation the rights to use, copy, modify, merge, publish,
%C distribute, sublicense, and/or sell copies of the Software, and to
%C permit persons to whom the Software is furnished to do so, subject to
%C the following conditions:
%C
%C The above copyright notice and this permission notice shall be
%C included in all copies or substantial portions of the Software.
%C
%C THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
%C EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
%C MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
%C IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
%C CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
%C TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
%C SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

\startsetups pauta:layout:footermarks
  \setuplayout[header=\zeropoint,footer={.07\paperheight}]
  \setupfootertexts[\PAUTAinfoLeft][\PAUTAinfoRight]
\stopsetups

\startsetups pauta:layout:headermarks
  \setuplayout[header={.07\paperheight},footer=\zeropoint]
  \setupheadertexts[\PAUTAinfoLeft][\PAUTAinfoRight]
\stopsetups

\startsetups pauta:content:leftmark
  Nib:\space\PAUTAnibWidth
  \quad(\PAUTAascenders/\PAUTAxHeight/\PAUTAdescenders)\quad
  \PAUTAnibAngle\textdegree{}
\stopsetups

\startsetups pauta:content:rightmark
  \doifsomething{\PAUTAhand}{\PAUTAhand}
  \doifsomething{\PAUTAhandInfo}{\quad(\PAUTAhandInfo)}
\stopsetups

\starttexdefinition nospaces doPauta [#1]
  \getparameters[PAUTA]
    [hand=,
    handInfo=,
    infoPosition=footer,
    infoLeft={\setup{pauta:content:leftmark}},
    infoRight={\setup{pauta:content:rightmark}},
    displayNibs=false,
    displayAngleMarks=false,
    nibWidth=3mm,
    nibAngle=35,
    ascenders=3,
    xHeight=4,
    descenders=3,
    adjustment=0,
    mainColor={s=.5},
    secondaryColor={s=.6},
    tertiaryColor={s=.7},
    #1]

  \doifelse{\PAUTAinfoPosition}{footer}
    {\setup[pauta:layout:footermarks]}
    {\setup[pauta:layout:headermarks]}

  \definecolor[tertiaryColor] [\PAUTAtertiaryColor]
  \definecolor[mainColor]     [\PAUTAmainColor]
  \definecolor[secondaryColor][\PAUTAsecondaryColor]

  \setupMPvariables[pauta][
    displayNibs=\PAUTAdisplayNibs,
    displayAngleMarks=\PAUTAdisplayAngleMarks,
    nibWidth=\PAUTAnibWidth,
    nibAngle=\PAUTAnibAngle,
    ascenders=\PAUTAascenders,
    xHeight=\PAUTAxHeight,
    descenders=\PAUTAdescenders,
    adjustment=\PAUTAadjustment,
  ]

  % Draw pauta
  \page\start\useMPgraphic{pauta}\stop\page
\stoptexdefinition

\starttexdefinition Pauta
  \dosingleargument\doPauta
\stoptexdefinition

\startMPinclusions
  input ./hatching.mp ;
\stopMPinclusions

\startuseMPgraphic{pauta}
  % Display square nib-width marks at line start?
  boolean displayNibs ;
  if known \MPvar{displayNibs} :
    displayNibs := \MPvar{displayNibs} ;
  else :
    displayNibs := false ;
  fi ;

  % Path for nib-widhts
  path nibWidth ; nibWidth = unitsquare ;

  % Line width
  numeric line ; line = TextWidth ;

  % Text height (without footers or headers)
  numeric box ; box = TextHeight - (HeaderHeight + FooterHeight);

  % Distance between lines
  numeric nibWidth ; nibWidth = \MPvar{nibWidth} ;

  % Ascenders
  numeric asc ; asc = \MPvar{ascenders} ;

  % X-Height
  numeric med ; med = \MPvar{xHeight} ;

  % Descenders
  numeric dsc ; dsc = \MPvar{descenders} ;

  % Adjustment value for layout
  numeric adjustment ; adjustment = \MPvar{adjustment} ;

  % Full line height
  numeric lineHeight ;
  lineHeight = (asc + med + dsc + adjustment) * nibWidth ;

  % Available lines
  numeric availableLines ;
  availableLines = floor(box / lineHeight) ;

  % Start position (zero)
  numeric start ; start = 0 ;

  % Nib-width nagle
  boolean displayAngleMarks ;
  if known \MPvar{displayAngleMarks} :
    displayAngleMarks := \MPvar{displayAngleMarks} ;
  else :
    displayAngleMarks := false ;
  fi ;

  numeric nibAngle ; nibAngle = \MPvar{nibAngle} ;

  % Color settings
  color mainColor ; mainColor = \MPcolor{mainColor} ;
  color secondaryColor ; secondaryColor = \MPcolor{secondaryColor} ;
  color tertiaryColor ; tertiaryColor = \MPcolor{tertiaryColor} ;

  % -------------------------------------------------------------------
  % Vardefs
  % -------------------------------------------------------------------

  % Draw a section (ascendant, x-height or descendant)
  vardef Section(expr lines, startPos) =
    % Draw section lines
    for i = 0 upto lines :
      save endPos ; endPos = i*nibWidth ;
      save distance ; distance = endPos + startPos ;
      pair a; a = (0, distance) ;
      pair b; b = (line, distance) ;
      draw a -- b withpen pencircle scaled 0.2mm
        withcolor secondaryColor ;
    endfor ;

    % Draw section separators
    draw (0, startPos) -- (line, startPos)
      withpen pencircle scaled 0.3mm
      withcolor mainColor ;

    draw (0, distance) -- (line, distance)
      withpen pencircle scaled 0.3mm
      withcolor mainColor ;

    % Return the distance
    distance
  enddef ;

  % Draw a line with three sections
  vardef TextLine(expr descendant, ascendant, xHeight, startPos) =
    % Display nib-width marks
    if displayNibs = true :

      numeric lines ; lines = descendant + ascendant + xHeight ;
      numeric nibs ; nibs = lines - 1 ;

      for i = 0 upto nibs :
        numeric nib ;
        nib = i * nibWidth + startPos ;

        fill unitsquare scaled nibWidth shifted
          (if (i mod 2 = 0) :
            (0, nib)
          else:
            (nibWidth, nib)
          fi) withcolor tertiaryColor ;
      endfor ;
    fi ;

    % Draw the three sections
    numeric desc, omed, asce ;

    desc = Section(descendant, startPos) ;
    omed = Section(xHeight, desc) ;
    asce = Section(ascendant, omed) ;

    % Draw a box to contain dotted angle guides
    numeric space ;

    if displayAngleMarks = true :
      if displayNibs :
        space = nibWidth * 2 ;
      else :
        space = 0 ;
      fi ;

      path box ; box =
        (space, startPos) -- (space, asce) --
        (line, asce) -- (line, startPos) --
        cycle ;

      % We use hatching.mp to fill the box with lines
      % with the right angle, gap and pen
      hatchoptions (withcolor tertiaryColor dashed evenly) ;
      hatchfill box withcolor (nibAngle, nibWidth*3, -0.2mm) ;
    fi ;

    % Return final position, adding interline space
    asce + nibWidth * 2
  enddef ;

  for i=1 upto availableLines :
    start := TextLine(dsc, asc, med, start) ;
  endfor ;
\stopuseMPgraphic
